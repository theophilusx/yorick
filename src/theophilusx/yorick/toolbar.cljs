(ns theophilusx.yorick.toolbar
  "Provides a component for rendering a simple toolbar."
  (:require [theophilusx.yorick.utils :refer [cs]]))

(defn defitem
  "Defines a toolbar item. A toolbar item definition is a map with the
  following keys -

  | Keyword    | Description                                                   |
  |------------|---------------------------------------------------------------|
  | `:type`    | The type of the item. This is used to determine what (if any) |
  |            | type of element is used to wrap the item. The value should    |
  |            | be a valid hiccup tag. Defaults to `:div`                     |
  | `:class`   | Any additional class attributes to add to the wrapping element|
  | `:content` | This can be any valid hiccup or reagent component             |"
  [content & {:keys [type class]
              :or {type :div}}]
  {:type type
   :class class
   :content content})

(defn toolbar
  "Defines a basic horizontal toolbar. The `items` argument is a vector of item
  definition maps as generated by the `defitem` function. Additional optional
  keyword arguments are

  | Key            | Description                                               |
  |----------------|-----------------------------------------------------------|
  | `:right-items` | a vector of toolbar items defined using                   |
  |                | `deftoolbar-item` which are placed to the right of        |
  |                | other items                                               |
  | `:class`       | a string or vector of string specifying CSS class names   |"
  [items & {:keys [right-items class]}]
  [:nav.level {:class (cs class)}
   (into
    [:div.level-left]
    (for [i items]
      [(:type i) {:class (cs "level-item"
                             (:class i))}
       (:content i)]))
   (when right-items
     (into
      [:div.level-right]
      (for [i right-items]
        [(:type i) {:class (cs "level-item"
                               (:class i))}
         (:content i)])))])
